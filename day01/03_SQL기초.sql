/* - 사용자 1명당 > Database 공간 1개가 생성 */

/*
- 데이터 베이스 서버와 소통을 위해 사용하는 언어
- Structure Query Language(구조적 질의 언어)
- SQL은 구조적으로 정의된 문법을 따름
    (응용보다는 정의된 문법으로 논리적 사용)

<객체 처리에 사용되는 명령>
    - 객체 생성 : CREATE
    - 객체 수정 : ALTER
    - 객체 삭제 : DROP
    
<데이터 처리에 사용되는 명령어>
    - 데이터 입력 : INSERT
    - 데이터 수정 : UPDATE
    - 데이터 삭제 : DELETE
    - 데이터 조회 : SELECT
        -> 데이터 처리의 90% 이상은 조회를 위한 SELECT가 사용

<데이터 베이스 설치 후 순서>
1. system 계정으로 접속 후 사용자 계정 및 패스워드 생성
2. 생성된 사용자 계정에 권한 부여
3. 생서된 사용자로 데이터베이스에 접속
4. 생성된 사용자 공간에 데이터 저장공간(테이블 객체)을 생성
5. 생성된 테이블 공간에 데이터 입력/수정/삭제/조회 처리
*/

/* 테이블 객체 생성 */
-- 테이블 : 행렬로 이루어진 공간
--             : 데이터를 담아 놓기 위한 저장 공간을 의미
--             : 테이블 생성 시에는 최소한 한개 이상의 컬럼(열)이 필요
--             : 컬럼(열)은 타입(문자, 정수, 실수, 날짜 등등)을 지정해야 함

/* test_tb 이름을 가지는 테이블 생성*/
CREATE TABLE test_tb(
    -- 컬럼 만들기
    -- 컬럼 이름 타입(길이 byte) Null 여부
      id VARCHAR2(15) NOT NULL,
    pw VARCHAR2(50) NOT NULL,
    -- Null의 여부를 정의하지 않으면 기본적으로 Null
    name VARCHAR2(20)
);

/* 테이블 수정 */
-- 테이블 수정은 컬럼추가, 컬럼삭제, 컬럼타입변겅, 컬럼사이즈변경, 기타 컬럼 관련 설정에 대한 수정만 가능

/* test_tb 테이블에 age 컬럼의 정수 타입, 8사이즈 추가 */
ALTER TABLE test_tb
    -- 추가(add)
            ADD(
                -- 추가할 컬럼 정의
                age NUMBER(8) -- NUMBER () : 정수 타입
                -- 8byte 사이즈 : 천만단위 사이즈 사용 가능
            );
    
/* test_tb 테이블 내에 name 컬럼의 사이즈를 15사이즈로 수정 */
-- !!중요!! 컬럼의 타입 또는 사이즈를 수정할 때 주의점
-- 컬럼에 데이터가 없는 경우
--      > 그냥 수정 진행

-- 컬럼에 데이터가 있는 경우
--      > 존재하는 데이터의 최대 길이 미만으로는 수정 불가
--      > 존재하는 컬럼의 타입이 문자인 경우, 숫자 타입으로 수정 불가
ALTER TABLE test_tb
    -- 컬럼 정보 수정(MODIFY)
        MODIFY(
            -- 컬럼의 사이즈 변경 시 타입까지 모두 작성
            name VARCHAR2(15)
        );
    
/* 테이블 삭제 */
DROP TABLE test_tb;

/*
<데이터 처리>
- 데이터 입력, 수정, 삭제, 조회 처리
- 데이터는 최초에 입력을 해야 수정, 삭제, 조회가 가능
- 데이터 입력을 위해서는 > 테이블(데이터 공간)이 존재 해야함
*/

/* 데이터 입력(INSERT) */
-- 아이디 : test01
-- 패스워드 : test_01_pw
-- 이름 : 이다
-- 나이 : 37

INSERT INTO test_tb(
    id, pw, name, age
) VALUES (
    -- SQL에서는 문자열 값은 작은 따옴표만 사용
    'test01', 'test_01_pw', '이다' ,  37
);

INSERT INTO test_tb(
    id, pw, name, age
) VALUES (
    -- SQL에서는 문자열 값은 작은 따옴표만 사용
    'test02', 'test_02_pw', '조이냥' ,  30
);

/* 입력 되어 있는 데이터 조회(SELECT) */
-- id 컬럼의 모든값 조회
SELECT id
  FROM test_tb;

-- id와 pw 컬럼의 모든 값 조회
SELECT id, pw
  FROM test_tb;

-- 테이블 전체 조회 '*' 기호는 ALL 이라고 호칭
-- 해석 : FROM(어디에서), SELECT(조회할 컬럼 선택), 조건이 없기 때문에 모든 행의 값 조회
SELECT *
  FROM test_tb;

/* 조건절(WHERE) */
-- 조건절 이하에 조건연산자 (비교연선자) 사용
-- 조건 연산자의 결과는 true or false
-- 데이터 프레임에서 필터링 조건과 동일한 개념

/* test_tb에서 id가 test01인 모든 컬럼의 데이터 조회 */
SELECT *
  FROM test_tb
WHERE id = 'test01';  -- 조건연산자 같다(=), 같지 않다(!=)

/* id가 test01인 데이터의 이름을 김유신으로 나이를 44세로 수정*/
-- 수정하기 전 중요한 작업
--   수정하고자 하는 대상의 정보를 먼저 조회
--   (조회하고자 하는 SQL 구문은 수정 후 검증확인을 위해 사용됨)
--   (또한 조회할 때 사용한 조건은 수정시 조건으로 사용됨)

/*검증 및 수정 시  사용할 조건을 먼저 확인*/
-- 데이터가 맞는지, 몇건이 수정 되는지 확인
SELECT *
  FROM test_tb
WHERE id = 'test01';

/* 수정 */
UPDATE test_tb
        SET name = '선짱',
                    age = 40
WHERE id = 'test01';  -- 만약 WHERE 절이 없다면 해당하는 컬럼의 전체 데이터가 변경됨
 
 /* 데이터에 대한 입력, 수정, 삭제 처리는 복구(취소)가 가능 */
 -- **COMMIT 이후에는 수정 불가 
ROLLBACK;
 
SELECT *
  FROM test_tb; -- 데이터 전체 삭제됨